// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: brand.proto

package brand

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BrandHandler_GetBrands_FullMethodName = "/brand.BrandHandler/GetBrands"
)

// BrandHandlerClient is the client API for BrandHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandHandlerClient interface {
	GetBrands(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*GetBrandResponse, error)
}

type brandHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandHandlerClient(cc grpc.ClientConnInterface) BrandHandlerClient {
	return &brandHandlerClient{cc}
}

func (c *brandHandlerClient) GetBrands(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*GetBrandResponse, error) {
	out := new(GetBrandResponse)
	err := c.cc.Invoke(ctx, BrandHandler_GetBrands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandHandlerServer is the server API for BrandHandler service.
// All implementations should embed UnimplementedBrandHandlerServer
// for forward compatibility
type BrandHandlerServer interface {
	GetBrands(context.Context, *GetBrandRequest) (*GetBrandResponse, error)
}

// UnimplementedBrandHandlerServer should be embedded to have forward compatible implementations.
type UnimplementedBrandHandlerServer struct {
}

func (UnimplementedBrandHandlerServer) GetBrands(context.Context, *GetBrandRequest) (*GetBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrands not implemented")
}

// UnsafeBrandHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandHandlerServer will
// result in compilation errors.
type UnsafeBrandHandlerServer interface {
	mustEmbedUnimplementedBrandHandlerServer()
}

func RegisterBrandHandlerServer(s grpc.ServiceRegistrar, srv BrandHandlerServer) {
	s.RegisterService(&BrandHandler_ServiceDesc, srv)
}

func _BrandHandler_GetBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandHandlerServer).GetBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandHandler_GetBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandHandlerServer).GetBrands(ctx, req.(*GetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrandHandler_ServiceDesc is the grpc.ServiceDesc for BrandHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrandHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brand.BrandHandler",
	HandlerType: (*BrandHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrands",
			Handler:    _BrandHandler_GetBrands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brand.proto",
}
